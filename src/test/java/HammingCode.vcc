;! Sample program to correct errors with a Hamming code.

;; HAMMING_DECODE(u64 dataface_index) -> u64
;; Read 8 bytes from the dataface given by the index, and decode as a hamming code. 
;; The parity bits are clustered at the most significant bytes.
;; So, if P is a parity bit and , is a data bit:
;;   PPP,P,,, P,,,,,,, P,,,,,,, ,,,,,,,, P,,,,,,, ,,,,,,,, ,,,,,,,, ,,,,,,,,
;;   (aka parity bits at positions 31, 47, 55, 59, 61, 62, and 63)
;;
;; On success, the parity bits are removed and the data is put in the least significant bits.
;; The top 6 bits (the "diagnostics") are therefore not part of the message and are instead used for diagnostics.
;; If the first bit is 0, there was success, and the diagnostics are:
;; - 0b000000 if there was no detected error
;; - 0b000001 if there was an error, but it was corrected
;; - 0b000010 if there was an error in bit 0 of the input (which does not matter wrt these code but is detected regardless).
;; If the first bit is 1, there was failure, and the diagnostics are:
;; - 0b100000 if the dataface index did not exist, or if it's ambiguous which one the CPU would read from.
;; - 0b100001 if there were two errors (due to the way Hamming codes work, it can detect but not fix these errors).
;; There is no guarantee for the state of the rest of the data in case of failure (and it should be discarded anyways).
;; You can use `AND R0 0xF9_FF_FF_FF` to get just the data back once you have determined there is no
;; irrecoverable error.
;;
;; RETURNS: the decoded data as discussed above.
;;
;;
;; REGISTERS REQUIRED:
;; - R1: 1 byte
;; - R2: 8 bytes
;; - R3: 1 byte
;;
;; STACK REQUIRED: 17 bytes.
; TODO: I feel like you can definitely remove the R3 requirement.
HAMMING_DECODE:
    #def ERROR_BAD_DATAFACE_COUNT 0x8000_0000_0000_0000
    #def ERROR_TWO_HAMMING_ERRORS 0x8800_0000_0000_0000

    ; First use reflection and terrible bytecode futzing to read from the dataface
    QUERY 0x0A R0 ; query how many datafaces are at that index
    ; We're hoping for exactly 1; so we decrement and see if it's 0
    DEC R0
    JZ GOOD_DATAFACE_COUNT
    ; heck
    MOV ERROR_BAD_DATAFACE_COUNT R0
    RET

    GOOD_DATAFACE_COUNT:
    ; Get that index out
    ; As per the spec, we want 0b1<dataface index>
    MOV R0 R1 ; squish into one byte
    OR R1 0b10000000 ; manually set the top byte
    ; Copy this to the read line
    ; Use R0 as our math doer
    MOV READ_FROM_DATAFACE_BYTECODE_FUTZING R0
    ; [READ; 1] [0x08; 2] [D0; 1]
    ; we want the label + 3
    ADD R0 3
    WRITE 1 R1 R0

    ; the moment of truth
    READ_FROM_DATAFACE_BYTECODE_FUTZING:
    READ 0x08 D0 R0

    ; Collect the locations of all the on bits, and XOR them together.
    #def MAX_BIT_IDX 63

    MOV R1 0 ; Running XOR
    MOV R2 MAX_BIT_IDX ; Index
    MOV R3 0 ; Running parity
    FOLD_XORS:
        ; Iterate *backwards* from highest to lowest
        ; We want a mask here only letting through the R2'th bit.
        ; So we save R2, overwrite it with 1,
        ; and shift the 1 left by that many bits.
        ; TODO: Currently, SP points at the thing on top of the stack.
        ; TODO: Is it more standard for it to point 1 byte above the top?
        PUSH R2
        ; @[-7, 0]  : index
        MOV 1 R2
        SHL R2 @8'-7
        ; See if this bit is on
        AND R2 R0
        JZ R2 NOT_ON
        ; It was on!
        ; XOR this into our running total
        XOR R1 R2
        ; and also increment our parity
        INC R3
        NOT_ON:
        POP R2 ; Pop our index back off the stack
        JZ END_FOLD_XORS ; we're done!
        DEC R2
        JMP FOLD_XORS ; back to the top

    END_FOLD_XORS:
    ; R1 should now have the position of our error,
    ; and the *bottom bit* of R3 has our parity.
    AND R3 1
    ; Now, R3 has our parity.
    ; By the end of this section, R3 will have our diagnostic code
    ; and the data will be fixed up except there are still interspersed
    ; parity bits.
    JNZ R1 SOME_ERROR
    0_ERROR:
        ; Either there was *no* error, or the error is at position 0

        JZ REMOVE_PARITY_BITS ; eyy there was no problem at all.
                              ; Also note, R3 will have 0 in it as a result
        ; Oh noes, bit #0 was flipped. This doesn't actualy cause any problems
        ; but we fix and report it anyways.
        XOR R0 0x8000_0000_0000_0000 ; this has only the highest bit set
        MOV R3 2 ; and add our diagnostic
        JMP REMOVE_PARITY_BITS
    SOME_ERROR:
        ; R1 will have the position of our error.
        ; But, if our parity is OK, we have a problem...
        ; this means there are two errors :concern:
        JNZ R0 FIX_ERROR
        ; welp there are two errors
        OR R0 ERROR_TWO_HAMMING_ERRORS ; add our diagnostic 
        ret ; too bad
        FIX_ERROR:
        ; Use R2 as our mask again (it has all 8 bytes needed)
        MOV 1 R2
        SHL R2 R1
        XOR R0 R2 ; flip our bit
        MOV R3 2 ; Add our diagnostic

    REMOVE_PARITY_BITS:
        ; Let's save our diagnostic:
        PUSH R3
        ; Take out the parity bits and shift our data down
        ; We have:
        ; PPP,P,,, P,,,,,,, P,,,,,,, ,,,,,,,, P,,,,,,, ,,,,,,,, ,,,,,,,, ,,,,,,,,
        ; or parity bits at positions 31, 47, 55, 59, 61, 62, and 63
        ; Wipe our 3 highest bits
        ; why did i choose 64 bits this is ridiculous
        AND R0 0x1FFF_FFFF_FFFF_FFFF ; this is 0b0001_1111 + 7 bytes of 1

        ; Now work on the remaining bits, from high to low.
        MOV 4 R3 ; R3 has how many bits to keep from the top.
        REMOVE_BIT:
            ; We want to take the upper X bits of this, shift them right, and assign them.
            ; 000APBCD -> 0000ABCD (saving 4 bits, shifting right 1)
            ; 0000ABCD PEFGHIJK -> 00000ABC DEFGHIJK (saving 8 bits, shifting right 1)

            MOV 0x8000_0000_0000_0000 R2 ; This is 0b1000_0000 and zeroes.
            DEC R3
            SHR R2 1 ; shift right SIGNED! so it adds more 1 bits to the left
            INC R3
            PUSH R2 ; Save this
            ; [Diagnostic; 1] [Mask; 8]
            MOV R0 R2 ; Get original
            SHRU R2 1 ; Shift the original data ...
            AND R2 @8'-7 ; and apply the mask

            ; Now, use the mask to apply the top of R2 back to R0
            PUSH R2 ; [Diagnostic; 1] [Mask; 8] [Applied; 8]
            MOV @8'-15 R2 ; get mask
            NOT R2 ; invert the mask
            AND R0 R2 ; erase the top bits of R0!
            POP R2 ; Get the applied part back
            OR R0 R2 ; Put the shifted top part back into R0
            SUB SP 8 ; "Pop" the mask off
            ; Nice, now back to the top ... unless?
            ADD R3 R3 ; double R3.
            ; This actually takes up less space than SHL R3 1 would, cause of the overhead for the literal.
            ; If R3 >= 64 (or, 128 now) we are out of bits to do
            ; Use R1 for the check
            MOV R3 R1
            SUB R1 128
            JGZ REMOVE_BIT
        ; And we're done!
        ; Put the diagnostic code in and that's all she wrote
        POP R3 ; get our diagnostic
        SHL R3 2 ; 0b000000AB -> 0b0000AB
        OR R0 R3 ; put the higher bits in
        RET ; and we're done!